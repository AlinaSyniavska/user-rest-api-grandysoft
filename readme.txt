Налаштування локальної бази даних PostgreSQL
Є кілька способів запустити базу даних PostgreSQL на нашій локальній машині.
Якщо у вас уже є, ви можете переходити до наступного кроку.
Якщо ви хочете запустити базу даних PostgreSQL за допомогою Docker, скористайтеся такою командою:

docker run --rm --name postgres-quotes -p 5432:5432 -e POSTGRES_PASSWORD=mysecretpassword -d postgres:13-alpine

(Я при розробці REST додатка налаштовувала БД і працювала з базою за допомогою pgAdmin).

Переходимо до платформи управління БД (pgAdmin) і створюємо там базу даних з назвою grandysoft_db (назва довільна,
але потім у файлі-конфігурації .env в проєкті треба буде вказати таку ж назву БД).

Object -> Create -> Database -> вводимо назву grandysoft_db -> Save

************************************************

Проєкт розміщений на Github за посиланням
https://github.com/AlinaSyniavska/user-rest-api-grandysoft

Переходимо за посиланням на сторінку репозиторію.
Наступні дії виконуємо для клонування проєкту.

Обираємо Code -> Clone HTTPS -> копіюємо посилання для клонування.

Воно буде виглядати таким чином:
https://github.com/AlinaSyniavska/user-rest-api-grandysoft.git

Переходимо в середовище розробки.
Обираємо щось на зразок (в залежності від того, яке середовище розробки використовується)
Get from VSC чи Clone Repository.
Вставляємо в поле URL скопійоване посилання. Натискаємо кнопку Clone.

Створюємо в корені проєкту файл-конфігурації .env.
Тепер ми можемо додати рядок підключення до локальної бази даних у .env створений файл.
Після змін він виглядатиме так:

DATABASE_URL="postgresql://postgres:<MYSECRETPASSWORD>@localhost:5432/grandysoft_db?schema=public"

де MYSECRETPASSWORD - пароль, що був вказаний при налаштуванні локальної БД.
Єдиною зміною тут є DATABASE_URL.
З міркувань безпеки найкраще передавати URL-адресу бази даних як змінну середовища у середовищі,
подібному до робочого, а не поміщати облікові дані у файл.

Далі додамо ще дві змінні до .env-файлу:

PORT=5000
NODE_ENV=dev

Переходимо у новоствореному проєкті в термінал і послідовно вводимо в терміналі наступні команди:

npm install

npx prisma migrate dev --name init

npx prisma db seed

npm run start

На даному етапі в нас згенеровані SQL міграції, які створюють таблиці та запускають їх із зазначеною базою даних.
А також заповнена база даних PostgreSQL деякими вихідними даними, що описано в seed.js.

Для тестування запитів створеного API будемо користуватися Postman. В клонованому проєкті міститься каталог /postman,
де вже є згенеровані та збережені collection та environment для даного API.

Відкриваємо Postman.

Далі Environments -> Import -> Choose Files -> "прописуємо" шлях до файлу user-rest-api-grandysoft.postman_environment.json -> Import

Після успішного імпорту обираємо для нашого workspace зі списку environment'тів імпортований user-rest-api-grandysoft.

Далі Collections -> Import -> Choose Files -> "прописуємо" шлях до файлу grandysoft.postman_collection.json -> Import

Після успішного імпорту відкриваємо колекцію grandysoft і тестуємо запити.










